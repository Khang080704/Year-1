#include<iostream>
#include<string>
#include<fstream>

using namespace std;

const int MAX = 30;
const double pi = 3.14;

typedef struct{
	string name[MAX];
	string size[MAX];
	string weight[MAX];
	string height[MAX];
} shape;

typedef struct{
	string name[MAX];
	double w[MAX];
	double h[MAX];
	double area[MAX];
	double perimter[MAX];
} rectangle;

typedef struct{
	string name[MAX];
	double r[MAX];
	double area[MAX];
	double perimter[MAX];
} circle;

typedef struct{
	string name[MAX];
	double a[MAX];
	double area[MAX];
	double perimter[MAX];
} square;

int getShapeFromFile(string filename, shape* shapes, string* Shape);
void shapeCount(string filename, shape* shapes, string* Shape);
void size(string filename, shape* shapes, circle* Circle,square* Square, string* Shape, rectangle* Rectangle);
void shapeCompare(string filename, shape* shapes, circle* Circle,square* Square, string* Shape, rectangle* Rectangle);

int main()
{
	string input = "Shapes.txt";
	shape* sh = new shape[MAX];
	circle* Circle = new circle[MAX];
	square* Square = new square[MAX];
	string* Shape = new string[MAX];
	rectangle* Rectangle = new rectangle[MAX];
	
	
	size(input,sh,Circle, Square,Shape,Rectangle);
	cout<<endl;
	shapeCompare(input,sh,Circle,Square,Shape,Rectangle);
	cout<<endl;
	shapeCount(input, sh,Shape);
	
	
	delete[] sh;
	delete[] Circle;
	delete[] Square;
	delete[] Rectangle;
	delete[] Shape;

	return 0;
}

int getShapeFromFile(string filename, shape* shapes, string* Shape){
	 
	string buffer;
	ifstream reader(filename, ios::in);
	getline(reader, buffer);
	int count = stoi(buffer);
	
	for(int i = 0; i < count; i++){
		getline(reader,Shape[i]);
	}	
	
	string needle = ": ";
	string separator = "=";
	int startPos = 0;
	int foundPos = 0;
	
	for(int i = 0; i < count; i++){
		foundPos = Shape[i].find_first_of(needle,startPos);
		shapes[i].name[i] = Shape[i].substr(startPos,foundPos);
	}
	
	
	for(int i = 0; i < count; i++){

		
		if(shapes[i].name[i] == "Circle"){
			foundPos = Shape[i].find_first_of(needle,startPos);
			startPos = foundPos + needle.length();
			foundPos = Shape[i].find_first_of(separator,startPos);
			startPos = foundPos + separator.length();
			shapes[i].size[i] = Shape[i].substr(startPos,Shape[i].length() - startPos);

		}
		else{
			if(shapes[i].name[i] == "Square"){
				foundPos = Shape[i].find_first_of(needle,startPos);
				startPos = foundPos + needle.length();
				foundPos = Shape[i].find_first_of(separator,startPos);
				startPos = foundPos + separator.length();
				shapes[i].size[i] = Shape[i].substr(startPos,Shape[i].length() - startPos);

			}
			else{
				foundPos = Shape[i].find_first_of(needle,startPos);
				string a ="; ";
				startPos = foundPos + needle.length();
				foundPos = Shape[i].find_first_of(separator, startPos);
				startPos = foundPos + separator.length();
				foundPos = buffer.find_first_of(a, startPos);
				shapes[i].weight[i] = Shape[i].substr(startPos, foundPos - startPos);
	
				foundPos = Shape[i].find_first_of(a,startPos);
				startPos = foundPos + a.length();
				foundPos = Shape[i].find_first_of(separator, startPos);
				startPos = foundPos + separator.length();
				shapes[i].height[i] = Shape[i].substr(startPos,Shape[i].length() - foundPos);

			}
		}
		
	}
	
	return count;
}

void shapeCount(string filename, shape* shapes, string* Shape){
	int count = getShapeFromFile(filename, shapes, Shape);
	
	int rectangleCount = 0;
	int squareCount = 0;
	int circleCount = 0;
	
	for(int i = 0; i < count;i ++){
		if(shapes[i].name[i] == "Rectangle"){
			rectangleCount++;
		}
		else{
			if(shapes[i].name[i] == "Circle"){
				circleCount++;
			}
			else{
				squareCount++;
			}
		}
		
	}
	cout<<endl;
	
	cout<<"Thong ke cac hinh da doc: "<<endl;
	cout<<"Rectangle: "<<rectangleCount<<endl;
	cout<<"Circle: "<<circleCount<<endl;
	cout<<"Square: "<<squareCount<<endl;
}

void size(string filename, shape* shapes,circle* Circle,square* Square, string* Shape, rectangle* Rectangle ){
	int count = getShapeFromFile(filename, shapes, Shape);

	for(int i = 0; i < count; i++){
		if(shapes[i].name[i] == "Circle"){
			Circle[i].r[i] = stod(shapes[i].size[i]);
			Circle[i].name[i] = shapes[i].name[i];
			Circle[i].area[i] = Circle[i].r[i] * Circle[i].r[i] * pi;
			Circle[i].perimter[i] = Circle[i].r[i] * 2 * pi;
			cout<<Shape[i]
				<<" => Area: "<<Circle[i].area[i]
				<<" , Perimeter: "<<Circle[i].perimter[i]<<endl;

		}
		else{
			if(shapes[i].name[i] == "Square"){
				Square[i].a[i] = stod(shapes[i].size[i]);
				Square[i].name[i] = shapes[i].name[i];
				Square[i].area[i] = Square[i].a[i] * Square[i].a[i];
				Square[i].perimter[i] = 4 * Square[i].a[i];
				cout<<Shape[i]
					<<" => Area: "<<Square[i].area[i]
					<<" , Perimeter: "<<Square[i].perimter[i]<<endl;
			}
			else{
				Rectangle[i].name[i] = shapes[i].name[i];
				Rectangle[i].h[i] = stod(shapes[i].height[i]);
				Rectangle[i].w[i] = stod(shapes[i].weight[i]);
				Rectangle[i].area[i] = Rectangle[i].h[i] * Rectangle[i].w[i] * 1.0;
				Rectangle[i].perimter[i] = 1.0*2*(Rectangle[i].h[i] + Rectangle[i].w[i]);
				cout<<Shape[i]
					<<" => Area: "<<Rectangle[i].area[i]
					<<" , Perimeter: "<<Rectangle[i].perimter[i]<<endl;
			}
		}
	}
}

void shapeCompare(string filename, shape* shapes, circle* Circle,square* Square, string* Shape, rectangle* Rectangle){
	int count = getShapeFromFile(filename, shapes, Shape);
	double area[MAX];
	
	for(int i = 0; i < count; i++){
		if(shapes[i].name[i] == "Circle"){
			area[i] = Circle[i].area[i];
		}
		else{
			if(shapes[i].name[i] == "Square"){
				area[i] = Square[i].area[i];
			}
			else{
				area[i] = Rectangle[i].area[i];
			}
			
		}
	}
	
	int maxAreaPos = 0;
	int minAreaPos = 0;
	double maxArea = area[0];
	double minArea = area[0];
	
	for(int i = 0; i < count; i++){
		if(maxArea < area[i]){
			maxArea = area[i];
			maxAreaPos = i;
		}
	}
	
	for(int i = 0; i < count; i++){
		if(minArea > area[i]){
			minArea = area[i];
			minAreaPos = i;
		}
	}
	
	cout<<"Hinh co dien tich lon nhat la: "<<Shape[maxAreaPos];
	cout<<" .Dien tich: "<<maxArea<<endl;
	cout<<"Hinh co dien tich nho nhat la: "<<Shape[minAreaPos];
	cout<<" .Dien tich: "<<minArea<<endl;
	
	double peremeter[MAX];
	
	for(int i = 0; i < count; i++){
		if(shapes[i].name[i] == "Circle"){
			peremeter[i] = Circle[i].perimter[i];
		}
		else{
			if(shapes[i].name[i] == "Square"){
				peremeter[i] = Square[i].perimter[i];
			}
			else{
				peremeter[i] = Rectangle[i].perimter[i];
			}
			
		}
	}
	
	int maxPerPos = 0;
	int minPerPos = 0;
	double maxPeremeter = peremeter[0];
	double minPeremeter= peremeter[0];
	
	for(int i = 0; i < count; i++){
		if(maxPeremeter < peremeter[i]){
			maxPeremeter = peremeter[i];
			maxPerPos = i;
		}
	}
	
	for(int i = 0; i < count; i++){
		if(minPeremeter > peremeter[i]){
			minPeremeter = peremeter[i];
			minPerPos = i;
		}
	}
	
	cout<<"Hinh co chu vi lon nhat la: "<<Shape[maxPerPos]
		<<" .Chu vi: "<<maxPeremeter<<endl;
	cout<<"Hinh co chu vi nho nhat la: "<<Shape[minPerPos]
		<<" .Chu vi: "<<minPeremeter<<endl;	
}
